import { useCallback } from 'react'
import { useMutation } from 'convex/react'
import { api } from '@/convex/_generated/api'
import { useMapPointStore } from '../model/store'
import type { MapPoint } from '../model/types'
import { useDeviceId } from '@/shared/hooks/useDeviceId'

/**
 * –•—É–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ—á–∫–∞–º–∏ –∫–∞—Ä—Ç—ã
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å NPC
 */
export function useMapPointInteraction() {
  const deviceId = useDeviceId()
  const updatePointStatus = useMapPointStore(state => state.updatePointStatus)
  
  // Convex mutation –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Ç–æ—á–∫–∏ –∫–∞–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω–æ–π
  const markResearched = useMutation(api.mapPoints.markResearched)

  /**
   * –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–æ—á–∫—É (–∫–ª–∏–∫ –∏–ª–∏ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
   */
  const researchPoint = useCallback(async (point: MapPoint) => {
    if (!deviceId) {
      console.error('No device ID available')
      return { success: false, error: 'No device ID' }
    }

    if (point.status === 'researched') {
      return { success: false, error: 'Already researched' }
    }

    try {
      // Optimistic update
      updatePointStatus(point.id, 'researched')

      // Server update
      const result = await markResearched({
        deviceId,
        pointKey: point.id
      })

      console.log(`‚úÖ Point researched: ${point.id}`, result)

      return { success: true, result }
    } catch (error) {
      console.error('Failed to research point:', error)
      
      // Rollback optimistic update
      updatePointStatus(point.id, point.status || 'discovered')
      
      return { success: false, error }
    }
  }, [deviceId, markResearched, updatePointStatus])

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ—á–∫–∏
   */
  const checkAccessibility = useCallback((point: MapPoint, playerData?: {
    reputation?: number
    faction?: string
    level?: number
    flags?: string[]
  }) => {
    const { metadata } = point

    if (!metadata) {
      return { accessible: true }
    }

    const issues: string[] = []

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    if (metadata.minReputation && playerData?.reputation !== undefined) {
      if (playerData.reputation < metadata.minReputation) {
        issues.push(`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: ${metadata.minReputation}`)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–∏
    if (metadata.requiresFaction && playerData?.faction) {
      if (playerData.faction !== metadata.requiresFaction) {
        issues.push(`–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Ñ—Ä–∞–∫—Ü–∏–∏: ${metadata.requiresFaction}`)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
    if (metadata.recommendedLevel && playerData?.level !== undefined) {
      if (playerData.level < metadata.recommendedLevel) {
        issues.push(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${metadata.recommendedLevel}`)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if (metadata.unlockRequirements && playerData?.flags) {
      const missingRequirements = metadata.unlockRequirements.filter(
        req => !playerData.flags?.includes(req)
      )
      if (missingRequirements.length > 0) {
        issues.push(`–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${missingRequirements.join(', ')}`)
      }
    }

    return {
      accessible: issues.length === 0,
      issues
    }
  }, [])

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–æ—á–∫–∏
   */
  const getAvailableActions = useCallback((point: MapPoint) => {
    const actions: Array<{
      id: string
      label: string
      icon: string
      color: string
      handler: () => void
    }> = []

    const { metadata, status } = point

    // –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    if (status === 'discovered') {
      actions.push({
        id: 'research',
        label: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å',
        icon: 'üîç',
        color: 'emerald',
        handler: () => researchPoint(point)
      })
    }

    // –î–∏–∞–ª–æ–≥–∏
    if (metadata?.dialogues && metadata.dialogues.length > 0) {
      actions.push({
        id: 'talk',
        label: '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å',
        icon: 'üí¨',
        color: 'blue',
        handler: () => console.log('Start dialogue:', metadata.dialogues[0])
      })
    }

    // –¢–æ—Ä–≥–æ–≤–ª—è
    if (metadata?.services?.includes('trade' as any)) {
      actions.push({
        id: 'trade',
        label: '–¢–æ—Ä–≥–æ–≤–∞—Ç—å',
        icon: 'üí∞',
        color: 'amber',
        handler: () => console.log('Open trade')
      })
    }

    // –†–µ–º–æ–Ω—Ç
    if (metadata?.services?.includes('repair' as any)) {
      actions.push({
        id: 'repair',
        label: '–†–µ–º–æ–Ω—Ç',
        icon: 'üîß',
        color: 'zinc',
        handler: () => console.log('Open repair')
      })
    }

    // –õ–µ—á–µ–Ω–∏–µ
    if (metadata?.services?.includes('healing' as any)) {
      actions.push({
        id: 'heal',
        label: '–õ–µ—á–µ–Ω–∏–µ',
        icon: '‚ù§Ô∏è',
        color: 'red',
        handler: () => console.log('Open healing')
      })
    }

    // –ö–≤–µ—Å—Ç—ã
    if (metadata?.questBindings && metadata.questBindings.length > 0) {
      actions.push({
        id: 'quests',
        label: '–ö–≤–µ—Å—Ç—ã',
        icon: 'üìú',
        color: 'purple',
        handler: () => console.log('Open quests:', metadata.questBindings)
      })
    }

    // –ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫
    if (metadata?.tradeOptions?.blackMarket) {
      actions.push({
        id: 'black_market',
        label: '–ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫',
        icon: 'üé≠',
        color: 'red',
        handler: () => console.log('Open black market')
      })
    }

    return actions
  }, [researchPoint])

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  const getDangerInfo = useCallback((point: MapPoint) => {
    const { metadata } = point

    if (!metadata?.danger_level) {
      return null
    }

    const dangerLevels = {
      low: {
        label: '–ù–∏–∑–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        color: 'yellow',
        icon: '‚ö†Ô∏è',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'
      },
      medium: {
        label: '–°—Ä–µ–¥–Ω—è—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        color: 'orange',
        icon: '‚ö†Ô∏è‚ö†Ô∏è',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –∏ –±–∞–∑–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ'
      },
      high: {
        label: '–í—ã—Å–æ–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        color: 'red',
        icon: '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è',
        description: '–°–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞'
      },
      extreme: {
        label: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        color: 'purple',
        icon: '‚ò†Ô∏è',
        description: '–°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤'
      }
    }

    return dangerLevels[metadata.danger_level]
  }, [])

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
   */
  const checkEquipment = useCallback((point: MapPoint, playerInventory?: string[]) => {
    const { metadata } = point

    if (!metadata?.requiresEquipment || !playerInventory) {
      return { hasRequired: true, missing: [] }
    }

    const missing = metadata.requiresEquipment.filter(
      item => !playerInventory.includes(item)
    )

    return {
      hasRequired: missing.length === 0,
      missing
    }
  }, [])

  return {
    researchPoint,
    checkAccessibility,
    getAvailableActions,
    getDangerInfo,
    checkEquipment
  }
}


