import { useMapPointStore } from '@/entities/map-point/model/store'
import { SEED_MAP_POINTS } from './seedData'
import type { MapPoint } from '@/entities/map-point/model/types'

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–µ–∫ –∫–∞—Ä—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –µ—Å–ª–∏ Convex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
export function initMapPointsFromSeed() {
  const store = useMapPointStore.getState()
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º seed –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–Ω—ã–µ MapPoint –æ–±—ä–µ–∫—Ç—ã
  const points: MapPoint[] = SEED_MAP_POINTS.map(seedPoint => ({
    ...seedPoint,
    status: 'not_found' as const, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
  }))

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å—Ç–æ—Ä
  store.setPoints(points)
  
  console.log(`‚úÖ Initialized ${points.length} map points from seed data`)
  
  return points
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏
 */
export function clearMapPoints() {
  const store = useMapPointStore.getState()
  store.reset()
  console.log('üóëÔ∏è Cleared all map points')
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—á–µ–∫
 */
export function getMapPointsStats() {
  const store = useMapPointStore.getState()
  const points = Array.from(store.points.values())
  
  const stats = {
    total: points.length,
    byType: {} as Record<string, number>,
    byPhase: {} as Record<number, number>,
    byStatus: {} as Record<string, number>,
    byFaction: {} as Record<string, number>
  }

  points.forEach(point => {
    // –ü–æ —Ç–∏–ø—É
    stats.byType[point.type] = (stats.byType[point.type] || 0) + 1
    
    // –ü–æ —Ñ–∞–∑–µ
    if (point.phase) {
      stats.byPhase[point.phase] = (stats.byPhase[point.phase] || 0) + 1
    }
    
    // –ü–æ —Å—Ç–∞—Ç—É—Å—É
    const status = point.status || 'not_found'
    stats.byStatus[status] = (stats.byStatus[status] || 0) + 1
    
    // –ü–æ —Ñ—Ä–∞–∫—Ü–∏–∏
    if (point.metadata?.faction) {
      stats.byFaction[point.metadata.faction] = (stats.byFaction[point.metadata.faction] || 0) + 1
    }
  })

  return stats
}

/**
 * –û–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export function discoverPointsInRadius(
  userLat: number,
  userLng: number,
  radiusMeters: number = 100
) {
  const store = useMapPointStore.getState()
  const points = Array.from(store.points.values())
  
  let discoveredCount = 0

  points.forEach(point => {
    const distance = calculateDistance(
      userLat,
      userLng,
      point.coordinates.lat,
      point.coordinates.lng
    )

    if (distance <= radiusMeters && point.status === 'not_found') {
      store.updatePointStatus(point.id, 'discovered')
      discoveredCount++
    }
  })

  console.log(`üîç Discovered ${discoveredCount} new points within ${radiusMeters}m radius`)
  
  return discoveredCount
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (Haversine)
function calculateDistance(
  lat1: number,
  lng1: number,
  lat2: number,
  lng2: number
): number {
  const R = 6371000 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const dLat = (lat2 - lat1) * Math.PI / 180
  const dLng = (lng2 - lng1) * Math.PI / 180

  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2)

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
  return R * c
}



